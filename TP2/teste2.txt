%% LEX
literals = "+-/*=()" ## a single char
ignore = " \t\n"
ignore_MULTILINECODE_pasdio = " olalllalallala"
ignore_MULTILINECasfafaE_pasdio = " olalllalallala"

tokens = [ 'VAR','NUMBER' ]

precedence = [
('left','+','-'),
('left','*','/'),
('right','UMINUS'),
]

states = [("MULTILINECODE", "exclusive"),
          ("LINECODE", "exclusive"),
          ("MULTICOMMENT", "exclusive")]




'[a-zA-Z_][a-zA-Z0-9_]*' return('VAR', x = 2, t.value)
'\d+(\.\d+)?'            return('NUMBER',)
error(f"Illegal character '{t.value[0]}', [{t.lexer.lineno}]",t.lexer.skip(1) )

%% YACC
precedence = [
(’left’,’+’,’-’),
(’left’,’*’,’/’),
(’right’,’UMINUS’),
]
#*
Este trabalho foi 
feito em 
yacccc
*#

%# symboltable : dictionary of variables
%ts = { }

stat : VAR '=' exp { ts[p[1]] = p[3] }
stat : exp { print(p[1]) }
exp : exp '+' exp { p[0] = p[1] + p[3] }
exp : exp '-' exp { p[0] = p[1] - p[3] }
exp : exp '*' exp { p[0] = p[1] * p[3] }
exp : exp '/' exp { p[0] = p[1] / p[3] }
exp : '-' exp { p[0] = p[2] }
exp : '(' exp ')' { p[0] = p[2] }
exp : NUMBER { p[0] = p[1] }
exp : VAR { p[0] = getval(p[1]) }


%*
#*
Esta funcao define UM
error
*#
def p_error(t):
    print(f"Syntax error at '{t.value}', [{t.lexer.lineno}]")

#*
Esta funcao define UM
get value
*#
def getval(n):
    if n not in ts:
        print(f"Undefined name '{n}'")
    return ts.get(n, 0)


#*
inicializacao do 
yacc
*#
y = yacc.yacc()
y.parse("3+4*7")

*%